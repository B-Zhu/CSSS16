options(stringsAsFactors = FALSE)
library(leafletR)
library(XML)
library(SPARQL)
#load data from querying the sparql endpoint
queryString = "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX eprtr: <http://prtr.ec.europa.eu/rdf/schema.rdf#>
PREFIX facility: <http://prtr.ec.europa.eu/rdf/facility/>
PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
#get million ton
#get rid of language tag en
select (?Country) (str(?regionName) AS ?Region) (?city as ?City) (?postalCode as ?zipcode) (?Quality) (xsd:float(?quantity)/1e+9 AS ?Quantity) (str(?industrialClassification) AS ?Activity) (?reportingyear as ?Year) (?lat as ?latitude) (?long as ?longitude)  (?Countrynr) (?facilityName as ?Facility) (?streetName as ?Street)   from <http://enipedia.tudelft.nl/data/EPRTR> {
?facility eprtr:facilityName ?facilityName .
?facility eprtr:latestReport ?latestReport .
?pollutantRelease eprtr:facilityReport ?latestReport .
?pollutantRelease rdfs:label \"CO2, AIR\" .
?pollutantRelease eprtr:totalQuantity ?quantity .
?facility wgs84:lat ?lat .
?facility wgs84:long ?long .
?facility eprtr:postalCode ?postalCode .
?facility eprtr:streetName ?streetName .
?facility eprtr:city ?city .
?latestReport eprtr:reportingYear ?reportingyear .
?latestReport eprtr:forNUTS ?nuts .
?nuts owl:sameAs ?rdfdata .
?rdfdata skos:prefLabel ?regionName .
?latestReport eprtr:nACEActivity ?NACE.
?NACE owl:sameAs ?rdfdata2 .
?rdfdata2 skos:prefLabel ?industrialClassification .
?latestReport eprtr:inCountry ?country .
?country owl:sameAs ?rdfdata3 .
?rdfdata3 skos:prefLabel ?Country .
}"
endpoint = "http://enipedia.tudelft.nl/sparql"
queryResults = SPARQL(url=endpoint, query=queryString, format='csv', extra=list(format='text/csv'))
map = queryResults$results
View(map)
View(map)
pwd
setwd("~/BenZhu/enCore")
data <- read.csv(file="EPRTR.csv")
data <- read.csv(file="EPRTR.csv")
View(data)
data <- read.csv(file="EPRTR.csv")
unique(data.IndustrialClassification)
data.frame
View(data)
data <- read.csv(file="EPRTR.csv")
unique(data[,5])
data <- read.csv(file="EPRTR.csv")
unique(data[,6])
data <- read.csv(file="EPRTR.csv")
classification <- unique(data[,6])
data <- read.csv(file="EPRTR.csv")
classification <- unique(data[,6])
write.csv(classification, "classification")
data <- read.csv(file="EPRTR.csv")
classification <- unique(data[,6])
write.csv(classification, "classification.csv")
setwd("~/Desktop/globalization")
#libraries
library(shiny)
library(leaflet)
######################### Constant variables #########################
#load dataframe and construct some necessary variables
dataframe <- read.csv("Earthquake.csv", stringsAsFactors=FALSE)
########################### main function ############################
shinyUI(bootstrapPage(
#Somehow this line turns out necessary for outputting a full-screen map
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
#MAP
leafletOutput("HistoryEvent", width = "100%", height = "100%"),
#FILTERING OPTIONS MENU
absolutePanel(
#some general settings
class = "panel panel-default",
top = 0,
right = 0,
width = 350,
height = "100%",
align = "center",
#title of the menu
h2("Filtering options"),
br(),
#filtering options are down here
sliderInput("year",
label = "Year of the Event",
min = 1900,
max = 1920,
step = 1,
value = 1900
#closing brackets
))))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
